---
description: General information based on the latest ./README.md content
globs:
---
Update it if APIs change:


# Bunfig

> Smart configuration loader for libraries, apps, and CLIs built utilizing Bun.

## Features

- üîÑ **Smart Config**: _intelligent configuration loading_
- üåê **Universal**: _optimized for both Bun & browser environments_
- ü™∂ **Lightweight**: _zero dependencies, built on native modules_
- üí™ **Type-Safe**: _fully typed configurations with generated type definitions_
- üõ†Ô∏è **CLI Tools**: _powerful & easy-to-use CLI_
- üì¶ **Flexible**: _supports multiple config file formats (.ts, .js, .mjs, .cjs, .json, .mts, .cts)_

## Install

```bash
bun install -d bunfig
```

## Get Started

If you are building any sort of Bun project, you can use the `loadConfig` function to load your configuration.

```ts
import type { Config } from 'bunfig'
import { loadConfig } from 'bunfig'

interface MyLibraryConfig {
  port: number
  host: string
}

const options: Config<MyLibraryConfig> = {
  name: 'my-app', // required
  cwd: './', // default: process.cwd()
  defaults: { // default: {}
    port: 3000,
    host: 'localhost',
  },
}

const resolvedConfig = await loadConfig(options)

console.log(resolvedConfig) // { port: 3000, host: 'localhost' }, unless a config file is found
```

> [!TIP]
> If your `process.cwd()` includes a `$name.config.{ts,js,mjs,cjs,json}` _(or `.$name.config.{ts,js,mjs,cjs,json}`)_ file, it will be loaded and merged with defaults, where file config file values take precedence. For minimalists, it also loads a `.$name.{ts,js,mjs,cjs,json}` and `$name.{ts,js,mjs,cjs,json}` file if present.

Alternatively, you can use the `config` function to load your configuration.

```ts
import type { Config } from 'bunfig'
import { config } from 'bunfig'

interface MyAppOrLibraryConfig {
  port: number
  host: string
}

const options: Config<MyAppOrLibraryConfig> = {
  name: 'my-app', // required to know which config file to load
  cwd: './', // default: process.cwd()
  defaults: { // default: {}
    port: 3000,
    host: 'localhost',
  },
}

const resolvedConfig = await config(options)
```

The config function is a wrapper around the `loadConfig` function and is useful for loading configuration in a more flexible way. It accepts an options object with the following properties:

- `name`: The name of the config file to load.
- `cwd`: The current working directory to load the config file from.
- `defaultConfig`: The default config to use if no config file is found.
- `endpoint`: The endpoint to fetch the config from.
- `headers`: The headers to send to the endpoint.
